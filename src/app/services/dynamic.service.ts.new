// filepath: /Users/gregbrown/github/YAP/yap-landing/src/app/services/dynamic.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { environment } from '../../environments/environment';

// Define the wallet info interface
export interface WalletInfo {
  seiWalletAddress: string;
  dynamicUserId: string;
}

/**
 * Service to handle interaction with the Dynamic Embedded Wallet functionality
 * This is a simplified version that simulates wallet creation for the waitlist,
 * avoiding the complications of the Dynamic SDK integration with Angular.
 */
@Injectable({
  providedIn: 'root'
})
export class DynamicService {
  private walletInfoSubject = new BehaviorSubject<WalletInfo | null>(null);
  
  constructor() {
    // Load wallet info from localStorage on service initialization
    this.loadFromLocalStorage();
    
    // Create a wallet if none exists
    if (!this.walletInfoSubject.getValue()) {
      this.createEmbeddedWallet();
    }
  }
  
  /**
   * Load wallet info from localStorage if available
   */
  private loadFromLocalStorage() {
    try {
      const storedInfo = localStorage.getItem('walletInfo');
      if (storedInfo) {
        const walletInfo = JSON.parse(storedInfo);
        this.walletInfoSubject.next(walletInfo);
        console.log('Loaded wallet info from localStorage:', walletInfo);
      }
    } catch (error) {
      console.error('Error loading wallet info from localStorage:', error);
    }
  }

  /**
   * Create an embedded wallet in the background (simulated for now)
   */
  async createEmbeddedWallet(): Promise<WalletInfo | null> {
    try {
      console.log('Creating embedded wallet...');
      
      // Generate a simulated wallet address (hex format for compatibility)
      const generateRandomAddress = () => {
        // Generate a 40-character random hex string for the address (excluding 0x prefix)
        const characters = '0123456789abcdef';
        let address = '0x';
        for (let i = 0; i < 40; i++) {
          address += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return address;
      };
      
      // Generate a random ID
      const generateRandomId = () => {
        return `dyn_${Math.random().toString(36).substring(2, 15)}`;
      };
      
      // Generate wallet info
      const walletInfo: WalletInfo = {
        seiWalletAddress: generateRandomAddress(),
        dynamicUserId: generateRandomId()
      };
      
      console.log('Created simulated wallet:', walletInfo);
      
      // Store in localStorage
      localStorage.setItem('walletInfo', JSON.stringify(walletInfo));
      
      // Update subject
      this.walletInfoSubject.next(walletInfo);
      
      return walletInfo;
    } catch (error) {
      console.error('Error creating simulated wallet:', error);
      return null;
    }
  }

  /**
   * Update wallet info from an external source
   */
  updateWalletInfo(walletInfo: WalletInfo) {
    // Store in localStorage
    localStorage.setItem('walletInfo', JSON.stringify(walletInfo));
    
    // Update our subject
    this.walletInfoSubject.next(walletInfo);
  }

  /**
   * Get the current wallet info as an observable
   */
  getWalletInfo(): Observable<WalletInfo | null> {
    return this.walletInfoSubject.asObservable();
  }
  
  /**
   * Get the current wallet info as a value
   */
  getCurrentWalletInfo(): WalletInfo | null {
    return this.walletInfoSubject.getValue();
  }
}
